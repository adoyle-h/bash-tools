#!/usr/bin/env bash
# shellcheck disable=SC1090

set -o errexit
set -o nounset
set -o pipefail
[[ -n "${XTRACE:+x}" ]] && set -o xtrace
[[ -n "${VERBOSE:+x}" ]] && set -o verbose
[[ -n "${DEBUG:-}" ]] && IS_DEBUG=true || IS_DEBUG=false
[[ $- =~ [x] ]] && PS4='+[${BASH_SOURCE}:${LINENO}:${FUNCNAME[0]:+${FUNCNAME[0]}}()]: '

readonly SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"

source "$SCRIPT_DIR"/../src/internals/consts.bash

warn() {
  echo "[${FUNCNAME[1]}] $*" >&2
}

error() {
  echo "[${FUNCNAME[1]}] $*" >&2
}

check_file() {
  local err_code=${2}
  if [[ ! -f $1 ]]; then
    error not found module file: "$1"
    return 101
  fi

  local filename extension
  filename=$(basename "$1")
  extension="${filename##*.}"

  if [[ $filename == bash ]] || [[ $extension != bash ]]; then
      error Module file extension must be .bash
      return "$err_code"
  fi

  if [[ $filename =~ - ]]; then
      error Module file name cannot contain \"-\"
      return "$err_code"
  fi

  if [[ $filename =~ [-_.]$ ]]; then
      error Module file name cannot ends with \"-\" or \"_\" or \".\"
      return "$err_code"
  fi
}

check_no_export() {
  local err_code=${2}
  local lodashFound
  lodashFound=$(grep 'export ' "$1")
  if [[ -n $lodashFound ]]; then
      error "'export' variable and function is forbidden."
      error Matched text: "$lodashFound"
      return "$err_code"
  fi
}

check_lodash_typos() {
  local lodashFound
  lodashFound=$(grep '[lL][oO][dD][aA][sS][hH]' "$1")
  if [[ -n $lodashFound ]]; then
      warn Found word \"lodash\". Is it a typo? Please check your code.
      warn Matched text: "$lodashFound"
  fi
}

check_alias() {
  local err_code=${2}
  local found
  found="$(grep '^alias ' "$1" || echo '')"

  if [[ -n "$found" ]]; then
    error alias is forbidden
    return "$err_code"
  fi
}

check_pubilc_function() {
  local err_code=${2}
  local count found
  found="$(grep -E '^([A-Za-z0-9]\w*)\(\) ?\{$' "$1")"
  count=$(wc -l <<< "$found")
  count=${count// /}

  if [[ $count -ne 1 ]]; then
    error Each module must define one public function.
    error Found "'${count}'" public functions:
    error "${found// \{/}"
    return "$err_code"
  fi
}

check_metadata() {
  local err_code=${2}
  local lines found
  found=$(sed -n '/^# ---$/,/^# ---$/p' "$1")
  lines=$( wc -l <<< "$found" )
  lines=${lines// /}

  if [[ $lines -lt 3 ]]; then
    error Module metadata is empty.
    return "$err_code"
  fi

  if [[ $lines -gt $_LOBASH_METADATA_MAX_LINES ]]; then
    error Found \""${lines}"\" lines of metadata code.
    error Current maximal value of lines is ${_LOBASH_METADATA_MAX_LINES}.
    error Please contact the repo maintainer to adjust the maximum.
    return "$err_code"
  fi
}

main() {
  local filepath=$1

  rules=(
    check_file
    check_alias
    check_pubilc_function
    check_metadata
    check_lodash_typos
    check_no_export
  )

  for i in "${!rules[@]}"; do
      ${rules[$i]} "$filepath" "10$i"
  done
}

main "$@"
