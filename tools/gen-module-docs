#!/usr/bin/env bash
# shellcheck disable=SC1090,SC2016

set -o errexit
set -o nounset
set -o pipefail
shopt -s inherit_errexit
[[ -n "${XTRACE:+x}" ]] && set -o xtrace
[[ -n "${VERBOSE:+x}" ]] && set -o verbose
[[ -n "${DEBUG:-}" ]] && IS_DEBUG=true || IS_DEBUG=false
[[ $- =~ [x] ]] && PS4='+[${BASH_SOURCE[0]}:${LINENO}|${FUNCNAME[0]:+${FUNCNAME[0]}}()|$?${XTRACE_PIPE:+|${PIPESTATUS[*]}}]: '

readonly SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
source "$SCRIPT_DIR"/../src/module_meta.bash

safe_rm() {
  local path=$1
  if [[ $path == / ]]; then
    echo "Dangerous! Do not rm $path"
    return 3
  fi

  if [[ $(dirname "$path") == / ]]; then
    echo "Dangerous! Do not rm $path"
    return 3
  fi

  rm -rf "$path"
}

lower_case() {
  read -r str
  printf '%s\n' "${str,,}"
}

print_category() {
  local category=$1
  local -n c=category_$1

  echo "Print Category: ${category^}"
  printf '\n%s\n' "## ${category^}" >> "$TARGET"

  for module_name in "${c[@]}"; do

    printf '\n%s\n\n' "### ${module_name}" >> "$TARGET"

    if [[ ${map[${module_name}_usage]} ]]; then
      printf -- '- Usage: `%s`\n' "${map[${module_name}_usage]}" >> "$TARGET"
    fi

    if [[ ${map[${module_name}_description]} ]]; then
      printf -- '- %s\n' "Description: ${map[${module_name}_description]}" >> "$TARGET"
    fi

    if [[ ${map[${module_name}_dependent]} ]]; then
      printf -- '- %s\n' "Dependent: ${map[${module_name}_dependent]}" >> "$TARGET"
    fi

    if [[ -n ${map[${module_name}_since]} ]]; then
      printf -- '- %s\n' "Since: ${map[${module_name}_since]}" >> "$TARGET"
    fi

    if [[ ${map[${module_name}_deprecated]} == true ]]; then
      printf -- '- %s\n' 'Deprecated: true' >> "$TARGET"
    fi

    printf -- '- More Examples: [../test/modules/%s.bats](../test/modules/%s.bats)\n' "$module_name" "$module_name" >> "$TARGET"
  done
}

print_toc() {
  echo "Print TOC"
  printf '\n%s\n\n' "## TOC" >> "$TARGET"

  for category in "${categories[@]}"; do
    printf -- '- [%s](#%s)\n' "${category^}" "$category" >> "$TARGET"
    local -n c=category_$category
    for module_name in "${c[@]}"; do
      printf -- '  - [%s](#%s)\n' "${module_name}"  "${module_name}" >> "$TARGET"
    done
  done
}

main() {
  local TARGET=$SCRIPT_DIR/../doc/module-usages.md
  local -A map
  local -a categories

  local -i module_count=0
  local filepath module_name category dependent since
  for filepath in $SCRIPT_DIR/../src/modules/*.bash; do
    ((module_count+=1))
    module_name=$(basename "$filepath" .bash)
    metadatas=$(_get_module_metadata_str "$filepath")

    category=$(echo "$metadatas" | grep -Eo '^Category: .+$' | sed 's/Category: //' | lower_case || echo '')
    deprecated=$(echo "$metadatas" | grep -Eo '^Deprecated: .+$' | sed 's/Deprecated: //' || echo '')
    dependent=$(echo "$metadatas" | grep -Eo '^Dependent: .+$' | sed 's/Dependent: //' || echo '')
    since=$(echo "$metadatas" | grep -Eo '^Since: .+$' | sed 's/Since: //' || echo '')
    usage=$(echo "$metadatas" | grep -Eo '^Usage: .+$' | sed 's/Usage: //' || echo '')
    description=$(echo "$metadatas" | grep -Eo '^Description: .+$' | sed 's/Description: //' || echo '')

    if [[ -z $category ]]; then
      category='Unknown'
    fi

    local cate_name=category_${category}
    echo "Scan file: $category/$module_name"

    if [[ -z ${!cate_name:-} ]]; then
      eval "declare -g -a ${cate_name}"
      categories+=("${category}")
    fi

    declare -n cate=$cate_name
    cate+=("$module_name")

    map[${module_name}_deprecated]=$deprecated
    map[${module_name}_dependent]=$dependent
    map[${module_name}_since]=$since
    map[${module_name}_usage]=$usage
    map[${module_name}_description]=$description
  done

  categories=( $(echo "${categories[@]}" | sort) )

  echo "Categories=${categories[*]}"

  local -i test_cases_count=0
  for i in $(grep -hrc '@test' "$SCRIPT_DIR/../test/modules/"); do
    (( test_cases_count+=i ))
  done
  for i in $(grep -hc '@test' "$SCRIPT_DIR/../test/import.bats"); do
    (( test_cases_count+=i ))
  done

  cat <<EOF > "$TARGET"
# Module Usages

${#categories[*]} Categories, ${module_count} Modules, ${test_cases_count} Test Cases.
EOF

  print_toc

  for category in "${categories[@]}"; do
    print_category "$category"
  done
}

main "$@"
