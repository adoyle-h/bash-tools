#!/usr/bin/env bash
# shellcheck disable=SC2016

set -o errexit
set -o nounset
set -o pipefail
(shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit
[[ -n "${VERBOSE:+x}" ]] && set -o verbose
[[ -n "${DEBUG:-}" ]] && IS_DEBUG=true || IS_DEBUG=false

readonly SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"

# shellcheck source=./colors.bash
source "$SCRIPT_DIR/colors.bash"
# shellcheck source=../src/load_internals.bash
source "$SCRIPT_DIR"/../src/load_internals.bash
_lobash.import_internals basic_meta_types module_meta erase_line rm
_lobash.imports sort has

print_category_header() {
  local -n mods=$1
  local TARGET=$2

  {
    printf '%s\n' "# Category: ${category}"
    printf '\n%s\n' '[⬅️ Back to previous page](./README.md)'

    printf '\n%s\n\n' "## TOC"
    for module_name in "${mods[@]}"; do
      printf -- '- [%s](%s)\n' "${module_name}" "#$module_name"
    done
  } >> "$TARGET"
}

print_meta_type() {
  printf -- '\n- %s:' "$meta_key" >> "$TARGET"
}

print_meta() {
  printf ' %s' "${1}" >> "$TARGET"
}

print_plural_meta() {
  printf '\n  - %s'  "${1}" >> "$TARGET"
}

print_meta_Usage() {
  printf ' `%s`' "${1}" >> "$TARGET"
}

print_plural_meta_Usage() {
  printf '\n  - `%s`' "${1}" >> "$TARGET"
}

print_meta_Dependent() {
  local deps=( ${1//,/ } )
  local dep_cate dep_path
  for dep in "${deps[@]}"; do
    dep_cate=$(_lobash.get_module_metadata "$dep" Category)
    dep_path="./${dep_cate,,}.md#$dep"
    printf ' [`%s`](%s)' "${dep}" "${dep_path}" >> "$TARGET"
  done
}

print_meta_skip_Deprecated() {
  [[ $1 != true ]]
}

print_meta_Deprecated() {
  if [[ -n ${1:-} ]]; then
    printf ' true' >> "$TARGET"
  fi
}

print_meta_Bash() {
  printf ' %s+' "$1" >> "$TARGET"
}

print_module_metas() {
  local module_name=$1

  printf '\n%s\n' "### ${module_name}" >> "$TARGET"

  local meta_val meta_key count i
  for meta_key in "${_LOBASH_BASIC_META_TYPES[@]}"; do
    count=$(_lobash.get_module_metadata "$module_name" "${meta_key}_count")
    if [[ -z ${count:-} ]] || (( count == 0 )) ; then
      continue
    fi

    meta_val=$(_lobash.get_module_metadata "$module_name" "${meta_key}")

    if l.has function "print_meta_skip_${meta_key}" && \
      "print_meta_skip_${meta_key}" "${meta_val}"
    then
      continue
    fi

    print_meta_type "$meta_val"

    if (( count == 1 )); then
      if l.has function "print_meta_${meta_key}"; then
        "print_meta_${meta_key}" "${meta_val}" "${meta_key}"
      else
        print_meta "${meta_val}" "${meta_key}"
      fi
    else
      for (( i = 0; i < count; i++ )); do
        meta_val=$(_lobash.get_module_metadata "$module_name" "${meta_key}" "$i")

        if l.has function "print_plural_meta_${meta_key}"; then
          "print_plural_meta_${meta_key}" "${meta_val}" "$i" "${meta_key}"
        else
          print_plural_meta "${meta_val}" "$i" "${meta_key}"
        fi
      done
    fi
  done
}

print_category() {
  local category=$1
  local TARGET=$2
  local -n c=category_$1

  _lobash.erase_line
  printf '%s' "To print category: ${category}"

  print_category_header c "$TARGET"

  printf '\n%s\n' "## Modules" >> "$TARGET"

  for module_name in "${c[@]}"; do
    print_module_metas "$module_name"

    {
      printf -- '\n- Test Cases: [tests/modules/%s.bats](../../tests/modules/%s.bats)' "$module_name" "$module_name"
      printf -- '\n- Source Code: [src/modules/%s.bash](../../src/modules/%s.bash)' "$module_name" "$module_name"
      printf '\n'
    } >> "$TARGET"

    local example_path="example/modules/${module_name%%.p}"
    if [[ -f ${SCRIPT_DIR}/../$example_path ]]; then
      printf -- '- %s\n' "Executable Example: [$example_path](../../$example_path)" >> "$TARGET"
    fi

  done

  printf '\n%s\n' '[⬆️ Back up to TOC](#toc)' >> "$TARGET"
}

print_toc() {
  echo "To print TOC"

  local TARGET=$1
  printf '\n%s\n\n' "## Modules TOC" >> "$TARGET"

  for category in "${categories[@]}"; do
    printf -- '- [%s](%s)\n' "${category}" "./${category,,}.md" >> "$TARGET"
    local -n c=category_$category
    for module_name in "${c[@]}"; do
      printf -- '  - [%s](%s)\n' "${module_name}"  "./${category,,}.md#${module_name//\./}" >> "$TARGET"
    done
  done
}

add_to_map() {
  local name=$1
  local -a founds=()
  while read -r i
  do
    [[ -n "$i" ]] && founds+=("$i")
  done < <(echo "$metadatas" | grep -Eo "^${name^}: .+$" | sed "s/${name^}: //" || true)

  map[${module_name}_${name}_sum]=${#founds[@]}
  for (( i = 0; i < ${#founds[@]}; i++ )); do
    map[${module_name}_${name}_$i]="${founds["$i"]}"
  done
}

print_header() {
  echo "To print header"

  local TARGET=$1

  local -i test_cases_count=0
  while read -r i; do
    (( test_cases_count+=i ))
  done < <(grep -hrc '@test' "$SCRIPT_DIR/../tests/modules/")

  while read -r i; do
    (( test_cases_count+=i ))
  done < <(grep -hrc '@test' "$SCRIPT_DIR/../tests/internals/")

  cat <<EOF > "$TARGET"
# Module Usages

${#categories[*]} Categories, ${module_count} Modules, ${test_cases_count} Test Cases.

Each module provides only one function which naming prefixed with \`l.\`.

The function which naming suffixed with \`.p\` should be used in pipeline. Like \`echo ' string ' | l.trim.p\`.

The function which naming suffixed with \`.s\` means in strict mode. It uses \`echo true/false\` instead of \`return 0/1\` to return values "true" and "false".

EOF
}

print_unsupported() {
  echo "To print unsupported mods"

  local TARGET=$1
  local module_name category

  {
    cat <<EOF
<a id="not-compatible"></a>
## Modules not compatible with Bash 4.0

Most Lobash modules support Bash 4.0+ except below modules.

EOF

    for module_name in "${!unsupported_mods[@]}"; do
      category=$(_lobash.get_module_metadata "$module_name" Category)
      printf -- '- [%s](%s): %s\n' "$module_name" "./${category,,}.md#${module_name//\./}" "${unsupported_mods[$module_name]}+"
    done
  } >> "$TARGET"
}

main() {
  local BASE_DIR="$SCRIPT_DIR/../doc/module-usages"
  _lobash.rm "$BASE_DIR"
  mkdir -p "$BASE_DIR"

  echo "To update module usages documents"

  local -a categories
  local -A unsupported_mods
  local -i module_count=0
  local filepath module_name category metadatas bash

  for filepath in $SCRIPT_DIR/../src/modules/*.bash; do
    ((module_count+=1))
    module_name=$(basename "$filepath" .bash)
    metadatas=$(_lobash.get_module_metadata_str "$filepath")

    _lobash.erase_line
    printf '%s' "To scan module: $module_name"
    _lobash.scan_module_metadata "$module_name"

    category=$(_lobash.get_module_metadata "$module_name" Category)
    bash=$(_lobash.get_module_metadata "$module_name" Bash)

    if [[ $bash != 4.0 ]]; then
      unsupported_mods["$module_name"]=$bash
    fi

    local cate_name=category_${category}

    if [[ -z ${!cate_name:-} ]]; then
      eval "declare -g -a ${cate_name}"
      categories+=("${category}")
    fi

    declare -n cate=$cate_name
    cate+=("$module_name")
  done

  readarray -t categories < <(l.sort categories)

  printf '\n%s\n' "Scanned ${#categories[@]} Categories: ${categories[*]}"

  print_header "$BASE_DIR/README.md"
  print_unsupported "$BASE_DIR/README.md"
  print_toc "$BASE_DIR/README.md"

  for category in "${categories[@]}"; do
    print_category "$category" "$BASE_DIR/${category,,}.md"
  done

  printf '\n%b%s\n%s%b\n' \
    "${GREEN}" \
    "Updated module usages documents." \
    "See $(dirname "$SCRIPT_DIR")/doc/module-usages/README.md" \
    "${RESET_ALL}"
}

main "${@:-}"
