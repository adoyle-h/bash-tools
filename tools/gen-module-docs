#!/usr/bin/env bash
# shellcheck disable=SC1090,SC2016

set -o errexit
set -o nounset
set -o pipefail
shopt -s inherit_errexit
[[ -n "${VERBOSE:+x}" ]] && set -o verbose
[[ -n "${DEBUG:-}" ]] && IS_DEBUG=true || IS_DEBUG=false

readonly SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"

source "$SCRIPT_DIR"/../src/load_internals.bash
_lobash.import_internals module_meta
_lobash.imports sort lower_case.p

safe_rm() {
  local path=$1
  if [[ $path == / ]]; then
    echo "Dangerous! Do not rm $path"
    return 3
  fi

  if [[ $(dirname "$path") == / ]]; then
    echo "Dangerous! Do not rm $path"
    return 3
  fi

  rm -rf -- "$path"
}

print_category() {
  local category=$1
  local -n c=category_$1

  echo "Print Category: ${category^}"
  printf '\n%s\n' "## ${category^}" >> "$TARGET"

  for module_name in "${c[@]}"; do

    printf '\n%s\n\n' "### ${module_name}" >> "$TARGET"

    local length
    if [[ ${map[${module_name}_usage_sum]} -gt 0 ]]; then
      length=${map[${module_name}_usage_sum]}
      if [[ $length == 1 ]]; then
        printf -- '- Usage: `%s`\n' "${map[${module_name}_usage_0]}" >> "$TARGET"
      else
        printf -- '- Usage:\n' >> "$TARGET"
        for (( i = 0; i < "$length"; i++ )); do
          printf -- '  - `%s`\n' "${map[${module_name}_usage_$i]}" >> "$TARGET"
        done
      fi
    fi

    if [[ ${map[${module_name}_description_sum]} -gt 0 ]]; then
      length=${map[${module_name}_description_sum]}
      if [[ $length == 1 ]]; then
        printf -- '- Description: %s\n' "${map[${module_name}_description_0]}" >> "$TARGET"
      else
        printf -- '- Description:\n' >> "$TARGET"
        for (( i = 0; i < "$length"; i++ )); do
          printf -- '  - %s\n' "${map[${module_name}_description_$i]}" >> "$TARGET"
        done
      fi
    fi

    if [[ -n ${map[${module_name}_dependent_0]:-} ]]; then
      printf -- '- %s' "Dependent:" >> "$TARGET"
      local deps=( ${map[${module_name}_dependent_0]//,/ } )
      for dep in "${deps[@]}"; do
        printf -- ' [`%s`](#%s)' "${dep}" "${dep}" >> "$TARGET"
      done

      printf '%s\n' '' >> "$TARGET"
    fi

    if [[ -n ${map[${module_name}_since_0]:-} ]]; then
      printf -- '- %s\n' "Since: ${map[${module_name}_since_0]}" >> "$TARGET"
    fi

    if [[ ${map[${module_name}_deprecated_0]:-} == true ]]; then
      printf -- '- %s\n' 'Deprecated: true' >> "$TARGET"
    fi

    local example_path="../example/modules/${module_name%%.p}"
    if [[ -f ${SCRIPT_DIR}/$example_path ]]; then
      printf -- '- %s\n' "Executable Example: [$example_path]($example_path)" >> "$TARGET"
    fi

    printf -- '- More Examples: [../tests/modules/%s.bats](../tests/modules/%s.bats)\n' "$module_name" "$module_name" >> "$TARGET"
  done
}

print_toc() {
  echo "Print TOC"
  printf '\n%s\n\n' "## TOC" >> "$TARGET"

  for category in "${categories[@]}"; do
    printf -- '- [%s](#%s)\n' "${category^}" "$category" >> "$TARGET"
    local -n c=category_$category
    for module_name in "${c[@]}"; do
      printf -- '  - [%s](#%s)\n' "${module_name}"  "${module_name}" >> "$TARGET"
    done
  done
}

add_to_map() {
  local name=$1
  local -a founds=()
  while read -r i
  do
    [[ -n "$i" ]] && founds+=("$i")
  done < <(echo "$metadatas" | grep -Eo "^${name^}: .+$" | sed "s/${name^}: //" || true)

  map[${module_name}_${name}_sum]=${#founds[@]}
  for (( i = 0; i < ${#founds[@]}; i++ )); do
    map[${module_name}_${name}_$i]="${founds["$i"]}"
  done
}

main() {
  local TARGET=$SCRIPT_DIR/../doc/module-usages.md
  local -A map
  local -a categories

  local -i module_count=0
  local filepath module_name category metadatas
  for filepath in $SCRIPT_DIR/../src/modules/*.bash; do
    ((module_count+=1))
    module_name=$(basename "$filepath" .bash)
    metadatas=$(_lobash.get_module_metadata_str "$filepath")

    category=$(echo "$metadatas" | grep -Eo '^Category: .+$' | sed 's/Category: //' | l.lower_case.p || echo '')

    if [[ -z $category ]]; then
      category='Unknown'
    fi

    local cate_name=category_${category}
    echo "Scan file: $category/$module_name"

    if [[ -z ${!cate_name:-} ]]; then
      eval "declare -g -a ${cate_name}"
      categories+=("${category}")
    fi

    declare -n cate=$cate_name
    cate+=("$module_name")

    add_to_map usage
    add_to_map description
    add_to_map since
    add_to_map dependent
  done

  categories=( $(l.sort categories) )

  echo "Categories=${categories[*]}"

  local -i test_cases_count=0
  for i in $(grep -hrc '@test' "$SCRIPT_DIR/../tests/modules/"); do
    (( test_cases_count+=i ))
  done
  for i in $(grep -hc '@test' "$SCRIPT_DIR/../tests/import.bats"); do
    (( test_cases_count+=i ))
  done

  cat <<EOF > "$TARGET"
# Module Usages

${#categories[*]} Categories, ${module_count} Modules, ${test_cases_count} Test Cases.
EOF

  print_toc

  for category in "${categories[@]}"; do
    print_category "$category"
  done
}

main "$@"
