#!/usr/bin/env bash
# Supported Bash: 4.0+

set -o errexit
set -o nounset
set -o pipefail
(shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit
[[ -n "${VERBOSE:-}" ]] && set -o verbose
[[ -n "${DEBUG:-}" ]] && IS_DEBUG=true || IS_DEBUG=false

readonly SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"

# shellcheck source=./tools/colors.bash
source "$SCRIPT_DIR/tools/colors.bash"
# shellcheck source=./src/load_internals.bash
source "$SCRIPT_DIR/src/load_internals.bash"
_lobash.import_internals basic_meta_types module_meta rm erase_line
_lobash.imports ask choose parse_params array_include union_array

SUPPORTED_BASH_VERISONS=( 4.0 4.1 4.2 4.3 4.4 )

is_valid_lobash_prefix() {
  local prefix=$1

  [[ ${prefix%%.}. == "$prefix" ]] && return 0
  [[ ${prefix%%-}- == "$prefix" ]] && return 0
  [[ ${prefix%%_}_ == "$prefix" ]] && return 0

  return 1
}

init_bash_min_version() {
  if [[ -n ${BASHVER:-} ]]; then
    BASH_MIN_VERSION=$BASHVER
    echo -e "${GREY}Build Lobash for Bash ${BASH_MIN_VERSION}+${RESET_ALL}"
    return
  fi

  local use_defualt
  set +e
  read -r -d '' text <<EOF
Default to generate Lobash for Bash 4.4+.
If you want to run Lobash with lower-version Bash, enter "NO".
Use Lobash for Bash 4.4+?
EOF
  set -e
  use_defualt=$(l.ask "$text")

  if [[ $use_defualt == YES ]]; then
    BASH_MIN_VERSION=4.4
    echo -e "${GREY}YES. Build Lobash for Bash ${BASH_MIN_VERSION}+${RESET_ALL}"
  elif [[ $use_defualt == NO ]]; then
    echo -e "${GREY}NO.${RESET_ALL}"
    echo "Choose the minimum version of Bash in which Lobash will run:"
    BASH_MIN_VERSION=$(l.choose "${SUPPORTED_BASH_VERISONS[@]}")
    echo -e "${GREY}Build Lobash for Bash ${BASH_MIN_VERSION}+${RESET_ALL}"
  else
    echo "Process terminated. Please enter YES or NO." >&2
    return 4
  fi
}

check_bash_version() {
  if ! l.array_include SUPPORTED_BASH_VERISONS "$BASH_MIN_VERSION"; then
    echo "Invalid BASH_MIN_VERSION: $BASH_MIN_VERSION" >&2
    return 3
  fi
}

declare -A inited_module
init_module() {
  local module_name=$1
  [[ -n ${inited_module[$module_name]:-} ]] && return
  inited_module[$module_name]=true

  module_names+=("$module_name")
  _lobash.scan_module_metadata "$module_name"

  local deps dep
  deps=$(_lobash.get_module_metadata "$module_name" "Dependent")
  if [[ -n "$deps" ]]; then
    deps=( ${deps//,/ } )
    for dep in "${deps[@]}"; do
      init_module "$dep"
    done
  fi
}

init_with_config_file() {
  read -r BASH_MIN_VERSION < <(grep -E '^BASH_MIN_VERSION:' "$config_path" | sed -E 's/^BASH_MIN_VERSION: ?(.+)/\1/')
  check_bash_version
  echo -e "${GREY}Build Lobash for Bash ${BASH_MIN_VERSION}+${RESET_ALL}"

  module_names=()

  local category_names module_name
  readarray -t category_names < <(grep -E '^- \[x\]' "$config_path" | sed -E 's/^- \[x\] +(.+)/\1/')

  for category_name in "${category_names[@]}"; do
    echo -e "${GREY}To import category ${category_name}${RESET_ALL}"
    while read -r module_name; do
      init_module "$module_name"
    done < "$SCRIPT_DIR/src/internals/categories/${category_name,,}"
  done

  while read -r module_name; do
    init_module "$module_name"
  done < <(grep -E '^  - \[x\]' "$config_path" | sed -E 's/^  - \[x\] +(.+)/\1/')

  module_names=( $(l.union_array module_names) )
}

init() {
  if (( ${#args[@]} == 0 )); then
    TARGET=$SCRIPT_DIR/dist/lobash.bash
  else
    if [[ -d ${args[0]} ]]; then
      TARGET=${args[0]}/lobash.bash
    else
      TARGET=${args[0]}
    fi
  fi

  if [[ -n ${opts[c]:-} ]]; then
    config_path=${opts[c]}
  elif [[ -n ${opts[config]:-} ]]; then
    config_path=${opts[config]}
  fi

  if [[ -z ${config_path:-} ]]; then
    init_bash_min_version
    module_names=()
    for path in "$SCRIPT_DIR"/src/modules/*.bash; do
      module_name=$(basename "$path" .bash)
      module_names+=("$module_name")
    done
  else
    if [[ ! -f ${config_path} ]]; then
      echo "Not found config file in path: $config_path" >&2
      return 3
    fi
    echo "Found config: $config_path"
    init_with_config_file
  fi
  # echo -e "${GREY}To import modules: ${module_names[*]}${RESET_ALL}"

  PREFIX=${PREFIX:-l.}
  OVERWRITE=${OVERWRITE:-no}

  if ! is_valid_lobash_prefix "$PREFIX"; then
    echo -e "${RED}Invalid PREFIX=\"$PREFIX\". PREFIX must end with one of '_', '-', '.'${RESET_ALL}" >&2
    return 4
  fi

  VERSION=$(cat "$SCRIPT_DIR/version")
  # LOBASH_POUCH_TIME must never change
  LOBASH_POUCH_TIME=1561389473

  UNIQ_KEY=${VERSION//[^[:alnum:]]/_}_$(( $(date '+%s') - LOBASH_POUCH_TIME ))_$RANDOM
}

clean() {
  if [[ $OVERWRITE != yes ]] && [[ -f $TARGET ]]; then
    local answer
    answer=$(l.ask "Existed file: ${TARGET}. Overwrite it?" N)
    echo -e "${GREY}$answer${RESET_ALL}"
    case $answer in
      YES )
        ;;
      * )
        echo "Not overwrite it. No new Lobash file generated."
        exit 0
        ;;
    esac
  fi

  _lobash.rm "$TARGET"
  mkdir -p "$(dirname "$TARGET")"
}

write() {
  printf -- '%s\n' "$*" >> "$TARGET"
}

fwrite() {
  write ''

  local prefixes="${_LOBASH_INTERNAL_FUNC_PREFIX}|${_LOBASH_INTERNAL_CONST_PREFIX}|${_LOBASH_PRIVATE_FUNC_PREFIX}|${_LOBASH_PRIVATE_CONST_PREFIX}|${_LOBASH_PUBLIC_FUNC_PREFIX}"
  prefixes=${prefixes//\./\\.}

  local word_boundary
  if [[ $_LOBASH_OS == 'Linux' ]]; then
    word_boundary='\b'
  elif [[ $_LOBASH_OS == 'MacOS' ]]; then
    word_boundary='[[:<:]]'
  else
    echo "Unexpected _LOBASH_OS=$_LOBASH_OS" >&2
  fi

  local public_const_prefix=${PREFIX//[^[:alnum:]]/_}
  public_const_prefix=${public_const_prefix^^}

  <"$1" \
    sed -E "s/${word_boundary}($prefixes)([_a-zA-Z0-9]+)/\\1${UNIQ_KEY}_\\2/g" \
    | sed -E "s/${word_boundary}${_LOBASH_PUBLIC_CONST_PREFIX}([_a-zA-Z0-9]+)/${public_const_prefix}\\1/g" \
    >> "$TARGET"
}

generate() {
  write '# This file is generated by https://github.com/adoyle-h/lobash'
  write '# Author: ADoyle <adoyle.h@gmail.com>'
  write '# License: Apache License Version 2.0'
  write "# Version: $VERSION"
  write "# Prefix: $PREFIX"
  write "# Bash Minimum Version: ${BASH_MIN_VERSION}"
  write "# Included Modules: ${module_names[*]}"

  local text

  if [[ ${BASH_MIN_VERSION} =~ ^4.(0|1|2|3)$ ]]; then
    echo -e "${YELLOW}Note: Not all features are supported in Bash ${BASH_MIN_VERSION}.\\nPlease read this link: https://github.com/adoyle-h/lobash/blob/develop/doc/with-lower-version-bash.md${RESET_ALL}"
    write "#"
    write "# Note: Not all features are supported in Bash ${BASH_MIN_VERSION}."
    write "# Please read this link: https://github.com/adoyle-h/lobash/blob/develop/doc/with-lower-version-bash.md"
  fi

  write ''
  write '######################## Lobash Internals ########################'

  # shellcheck source=./src/internals/basic_internals.bash
  source "$SCRIPT_DIR"/src/internals/basic_internals.bash

  for name in "${_LOBASH_DIST_INTERNALS[@]}"; do
    fwrite "$SCRIPT_DIR/src/internals/$name.bash"
  done
  write "_LOBASH_${UNIQ_KEY}_PREFIX=$PREFIX"
  write "_LOBASH_${UNIQ_KEY}_PUBLIC_DEPTH=2"
  write "_LOBASH_${UNIQ_KEY}_MIN_BASHVER=$BASH_MIN_VERSION"

  write ''
  write '######################## Private Methods ########################'

  local compare module_name bashver
  local -A skips

  echo "Scanning Module Metadatas..."
  for module_name in "${module_names[@]}"; do
    _lobash.erase_line
    printf '%s' "To scan module: $module_name"
    _lobash.scan_module_metadata "$module_name"
    bashver=$(_lobash.get_module_metadata "$module_name" "Bash")
    compare=$(_lobash.semver_compare "$BASH_MIN_VERSION" "$bashver")
    if (( compare < 0 )); then
      skips[$module_name]=true
    fi
  done

  printf '\n%s\n' "Writing Module Contents..."
  for module_name in "${module_names[@]}"; do
    if [[ -z ${skips[$module_name]:-} ]]; then
      fwrite "$SCRIPT_DIR/src/modules/$module_name.bash"
    fi
  done

  write ''
  write '######################## Public Methods ########################'

  echo "Writing Module Public Methods..."
  for module_name in "${module_names[@]}"; do
    if [[ -n ${skips[$module_name]:-} ]]; then
      bashver=$(_lobash.get_module_metadata "$module_name" "Bash")
      echo -e "${YELLOW}Note${RESET_ALL}: Module '${CYAN}$module_name${RESET_ALL}' is not included in generated file. It supports Bash ${BLUE}${bashver}+${RESET_ALL} while required Bash ${BLUE}$BASH_MIN_VERSION${RESET_ALL}."

      write "# Module '$module_name' is not included in generated file. It supports Bash ${bashver}+ while required Bash $BASH_MIN_VERSION."
    else
      write "$PREFIX$module_name() { l.${UNIQ_KEY}_$module_name \"\$@\"; }"
    fi
  done

  set +u
  local skip_count=${#skips[@]}
  echo "Imported $(( ${#module_names[@]} - skip_count )) modules. Skipped ${skip_count} modules."
  set -u
  echo -e "Generated Lobash file: ${GREEN}$TARGET${RESET_ALL}"
}

declare -A opts=()
declare -a args=()
l.parse_params opts args "$@"
init
clean
generate
